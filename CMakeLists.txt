# Mac OS X specific configuration
IF(APPLE)
	SET(CMAKE_OSX_DEPLOYMENT_TARGET "10.6")
	SET(CMAKE_OSX_SYSROOT "/Developer/SDKs/MacOSX10.6.sdk/")
	SET(CMAKE_OSX_ARCHITECTURES "i386;x86_64")
ENDIF()

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(Tippi)

# Common source files
SET(LIB_COMMON_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
SET(LIB_COMMON_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/src)
FILE(GLOB_RECURSE LIB_COMMON_SOURCE
    "${LIB_COMMON_SOURCE_DIR}/*.cpp"
)
FILE(GLOB_RECURSE LIB_COMMON_HEADER
    "${LIB_COMMON_SOURCE_DIR}/*.h"
)

# App source dir
SET(APPS_SOURCE_DIR ${CMAKE_SOURCE_DIR}/apps)

# Test source files
SET(TEST_SOURCE_DIR ${CMAKE_SOURCE_DIR}/test/src)
FILE(GLOB_RECURSE TEST_SOURCE
    "${TEST_SOURCE_DIR}/*.h"
    "${TEST_SOURCE_DIR}/*.cpp"
)

# Library configuration
SET(LIB_DIR ${CMAKE_SOURCE_DIR}/lib)
SET(LIB_BIN_DIR ${LIB_DIR}/bin)
SET(LIB_INCLUDE_DIR ${LIB_DIR}/include)
SET(LIB_SOURCE_DIR ${LIB_DIR}/src)

INCLUDE(cmake/GetOpt.cmake)
INCLUDE(cmake/GTest.cmake)
INCLUDE(cmake/GMock.cmake)

ADD_LIBRARY(getopt ${LIB_GETOPT_SOURCE} ${LIB_INCLUDE_DIR})
ADD_LIBRARY(gtest ${LIB_GTEST_SOURCE} ${LIB_INCLUDE_DIR})
ADD_LIBRARY(gmock ${LIB_GMOCK_SOURCE} ${LIB_INCLUDE_DIR})
ADD_LIBRARY(common ${LIB_COMMON_SOURCE} ${LIB_COMMON_HEADER})

# Include directories
INCLUDE_DIRECTORIES("${LIB_INCLUDE_DIR}" "${LIB_COMMON_INCLUDE_DIR}")

# Compiler configuration
IF(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /EHsc /MP /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /MP")
ELSE()
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Os")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -std=c++0x")

	# Xcode requires these flags to allow debugging
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g3 -O0 -fno-inline")

	# Hide some bogus warnings and enable color diagnostics if ccache is used with clang
	IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qunused-arguments -fcolor-diagnostics")
	ENDIF()
ENDIF()

# net2beh executable
ADD_EXECUTABLE(net2beh "${APPS_SOURCE_DIR}/net2beh.cpp")
TARGET_LINK_LIBRARIES(net2beh common getopt)

# net2cl executable
ADD_EXECUTABLE(net2cl "${APPS_SOURCE_DIR}/net2cl.cpp")
TARGET_LINK_LIBRARIES(net2cl common getopt)

# test executable
ADD_EXECUTABLE(test ${SOURCE} ${TEST_SOURCE})
TARGET_LINK_LIBRARIES(test common gtest gmock)
SET_TARGET_PROPERTIES(test PROPERTIES COMPILE_DEFINITIONS "TESTING")

ADD_CUSTOM_COMMAND(TARGET test POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_SOURCE_DIR}/test/data" $<TARGET_FILE_DIR:test>/data
)
